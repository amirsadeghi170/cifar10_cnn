import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, Dropout
from tensorflow.keras.layers import GlobalMaxPooling2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.models import Model
import numpy as np
import matplotlib.pyplot  as plt

from keras.datasets import cifar10
(x_train,y_train),(x_test,y_test)=cifar10.load_data()
print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)

x_train=x_train/255
x_test=x_test/255
y_train=y_train.flatten()
y_test=y_test.flatten()

fig, ax = plt.subplots(5, 5)
k = 0
 
for i in range(5):
    for j in range(5):
        ax[i][j].imshow(x_train[k], aspect='auto')
        k += 1

input=Input(shape=x_train[0].shape)

conv1=Conv2D(32,(3,3),activation="relu",padding="same")(input)
norm1=BatchNormalization()(conv1)

conv2=Conv2D(32,(3,3),activation="relu",padding="same")(norm1)
norm2=BatchNormalization()(conv2)
pool1=MaxPooling2D((2,2))(norm2)

conv3=Conv2D(64,(3,3),activation="relu",padding="same")(pool1)
norm3=BatchNormalization()(conv3)

conv4=Conv2D(64,(3,3),activation="relu",padding="same")(norm3)
norm4=BatchNormalization()(conv4)
pool4=MaxPooling2D((2,2))(norm4)

conv5=Conv2D(128,(3,3),activation="relu",padding="same")(pool4)
norm5=BatchNormalization()(conv5)

conv6=Conv2D(128,(3,3),activation="relu",padding="same")(norm5)
norm6=BatchNormalization()(conv6)
pool6=MaxPooling2D((2,2))(norm6)

flat=Flatten()(norm6)
drop=Dropout(0.2)(flat)

dense=Dense(1024,activation="relu")(drop)
drop2=Dropout(0.2)(dense)

out=Dense(10,activation="softmax")(drop2)

model=Model(input,out)

model.summary()

model.compile(optimizer="adam",loss="sparse_categorical_crossentropy",metrics=["accuracy"])

fit=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=50)

data_generator=tf.keras.preprocessing.image.ImageDataGenerator(width_shift_range=0.1,height_shift_range=0.1,horizontal_flip=True)
train_generator=data_generator.flow(x_train,y_train,batch_size=32)
steps_per_epoch=x_train.shape[0]//32
r=model.fit(train_generator,validation_data=(x_test,y_test),steps_per_epoch=steps_per_epoch,epochs=50)

plt.plot(r.history["accuracy"],label="acc",color="red")
plt.plot(r.history["val_accuracy"],label="val_acc",color="green")
plt.legend()

labels = '''airplane automobile bird cat deerdog frog horseship truck'''.split()
 

image_number = 0
 

plt.imshow(x_test[image_number])
 

n = np.array(x_test[image_number])
 

p = n.reshape(1, 32, 32, 3)
 

predicted_label = labels[model.predict(p).argmax()]
 

original_label = labels[y_test[image_number]]
 

print("Original label is {} and predicted label is {}".format(
    original_label, predicted_label))
